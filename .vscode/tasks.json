{
  "version": "2.0.0",
  "type": "shell",
  "problemMatcher": ["$python"],
  "presentation": {
    "clear": true,
    "close": true,
    "group": "tasks",
    "reveal": "silent"
  },
  "inputs": [
    {
      "id": "stage",
      "type": "pickString",
      "description": "stage",
      "default": "",
      "options": ["sanitize_source_tags", "sync_personal_settings", "sync_docs"]
    },
    {
      "id": "templateOptions",
      "type": "pickString",
      "description": "Template options.",
      "options": ["", "-Prompt", "-Stay", "-Stay -Prompt", "-Recopy -Prompt"]
    },
    {
      "id": "ref",
      "type": "promptString",
      "description": "Commit SHA or other VCS reference."
    },
    {
      "id": "dependency",
      "type": "promptString",
      "description": "Show tree of packages requesting this dependency."
    },
    {
      "id": "version",
      "type": "promptString",
      "description": "Version number."
    },
    {
      "id": "changeType",
      "type": "pickString",
      "description": "Change type.",
      "options": ["breaking", "deprecation", "change"]
    }
  ],
  "tasks": [
    {
      "label": "Run pytest",
      "runOptions": { "runOn": "folderOpen" },
      "presentation": { "group": "background" },
      "icon": { "id": "beaker" },
      "command": "uvx --from rust-just just run-pytest",
      "group": { "kind": "test", "isDefault": true },
      "isBackground": true,
      "problemMatcher": [
        {
          "base": "$python",
          "source": "pytest",
          "background": {
            "beginsPattern": "=+ test session starts =+",
            "endsPattern": "=+ (?:\\d+ passed|\\d+ failed|no tests ran).* =+"
          }
        }
      ]
    },
    {
      "label": "Run npm build",
      "icon": { "id": "package" },
      "command": "npm run build",
      "group": { "kind": "build", "isDefault": true },
      "problemMatcher": ["$tsc-watch"]
    },
    {
      "label": "Run npm watcher",
      "runOptions": { "runOn": "folderOpen" },
      "presentation": { "group": "background" },
      "icon": { "id": "package" },
      "command": "npm run watch",
      "isBackground": true,
      "problemMatcher": [
        {
          "base": "$tsc-watch",
          "source": "tsc",
          "background": {
            "beginsPattern": "Starting compilation in watch mode\\.\\.\\.|File change detected\\.",
            "endsPattern": "Compilation complete\\.|Found \\d+ error[s]?\\. Watching"
          }
        }
      ]
    },
    {
      "label": "Run template watcher",
      "runOptions": { "runOn": "folderOpen" },
      "presentation": { "group": "background" },
      "icon": { "id": "edit" },
      "command": "uvx --from rust-just just watch-templates",
      "isBackground": true,
      "problemMatcher": [
        {
          "base": "$pester",
          "source": "formatter",
          "pattern": [
            {
              "regexp": "^(.+\\s:\\s.+)$",
              "message": 1
            },
            {
              "regexp": "^\\s*[Aa]t\\s+([^,]+,)?(.+?):(\\s+line\\s+)?(\\d+).*$",
              "file": 2,
              "line": 4
            }
          ],
          "background": {
            "beginsPattern": "^(?:VERBOSE: START PROBLEM MATCHER)",
            "endsPattern": "^(?:VERBOSE: STOP PROBLEM MATCHER)"
          }
        }
      ]
    },
    {
      "label": "proj: remove empty data folders",
      "command": "Get-ChildItem -Path ./data -Recurse -Directory | Where-Object { (Get-ChildItem -Path $_ -Recurse -File | Measure-Object).Count -eq 0 } | Remove-Item -Recurse -Force",
      "icon": { "id": "terminal-powershell" }
    },
    {
      "label": "proj: local notes-dev configs",
      "command": "python .tools/scripts/local_dev_configs.py",
      "icon": { "id": "graph" }
    },
    {
      "label": "dvc: repro",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "command": "dvc repro ${input:stage}",
      "icon": { "id": "graph" }
    },
    {
      "label": "dvc: repro force",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "command": "dvc repro --force ${input:stage}",
      "icon": { "id": "graph" }
    },
    {
      "label": "dvc: dag",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "command": "(dvc dag --md) -Replace 'mermaid', '{mermaid}' > docs/dag.md && . '~/.local/nodeenvs/markdownlint/Scripts/Activate.ps1' && markdownlint --fix docs/dag.md",
      "icon": { "id": "graph" }
    },
    {
      "label": "dvc: synchronize params",
      "command": "python -m notes_pipeline.models.params",
      "icon": { "id": "graph" }
    },
    // * -------------------------------------------------------------------------- * //
    // * PROJECT SETUP * //

    {
      "label": "setup: Sync with template",
      "command": ". ./dev.ps1 && Sync-Template ${input:templateOptions}",
      "icon": { "id": "file-symlink-directory" }
    },
    {
      "label": "setup: Sync with specific template ref",
      "command": ". ./dev.ps1 && Sync-Template ${input:ref} ${input:templateOptions}",
      "icon": { "id": "file-symlink-directory" }
    },
    {
      "label": "setup: Sync contributor environment",
      "runOptions": { "runOn": "folderOpen" },
      "command": "if (!$Env:DEVCONTAINER) {./Invoke-Uv.ps1 -Sync}",
      "icon": { "id": "file-symlink-directory" }
    },
    {
      "label": "setup: Initialize repository",
      "command": ". ./dev.ps1 && Initialize-Repo",
      "icon": { "id": "file-symlink-directory" }
    },
    {
      "label": "setup: Remove *.rej",
      "command": "Get-ChildItem -Recurse -Filter *.rej | Remove-Item",
      "icon": { "id": "file-symlink-directory" }
    },
    {
      "label": "setup: Initialize Windows machine",
      "command": ". ./dev.ps1 && Initialize-Windows",
      "icon": { "id": "file-symlink-directory" }
    },
    {
      "label": "setup: Initialize Linux/MacOS machine",
      "command": "scripts/Initialize-LinuxMacOS.sh",
      "icon": { "id": "file-symlink-directory" }
    },
    {
      "label": "setup: Finish initializing machine (cross-platform)",
      "command": ". ./dev.ps1 && Initialize-Machine",
      "icon": { "id": "file-symlink-directory" }
    },

    // * -------------------------------------------------------------------------- * //
    // * OTHER TASKS * //

    {
      "label": "task: pre-commit",
      "command": "./Invoke-Uv.ps1 pre-commit run --verbose",
      "icon": { "id": "git-commit" }
    },
    {
      "label": "task: pre-commit (all)",
      "command": "./Invoke-Uv.ps1 pre-commit run --all-files --verbose",
      "icon": { "id": "git-commit" }
    },
    {
      "label": "task: Rebase back to fork",
      "command": "git rebase -i --fork-point main",
      "icon": { "id": "git-branch" }
    },
    {
      "label": "task: Show tree of packages requesting a dependency",
      "command": "./Invoke-Uv.ps1 pipdeptree --reverse --packages ${input:dependency}",
      "icon": { "id": "versions" }
    },
    {
      "label": "task: Run pytest with coverage",
      "command": "./Invoke-Uv.ps1 pytest --cov  --cov-config pyproject.toml --cov-report xml",
      "icon": { "id": "check" }
    },
    {
      "label": "task: Run ruff",
      "command": ". ./dev.ps1 && iuv ruff check . && iuv ruff format .",
      "icon": { "id": "check" }
    },
    {
      "label": "task: Run pyright",
      "command": "./Invoke-Uv.ps1 notes-dev elevate-pyright-warnings; try { ./Invoke-Uv.ps1 pyright } finally { Remove-Item pyrightconfig.json }",
      "icon": { "id": "check" }
    },
    {
      "label": "task: Build docs",
      "command": "./Invoke-Uv.ps1 notes-dev build-docs",
      "icon": { "id": "book" }
    },
    {
      "label": "task: Profile this file",
      "command": "./Invoke-Uv.ps1 cProfile -o .prof ${file}",
      "icon": { "id": "graph-line" }
    },
    {
      "label": "task: View profile results with snakeviz",
      "command": "./Invoke-Uv.ps1 snakeviz .prof",
      "icon": { "id": "graph-line" }
    },
    {
      "label": "task: Bump version",
      "command": ". ./dev.ps1 && uvx copier@9.2.0 update --vcs-ref=HEAD --defaults --data project_version='${input:version}' && iuv towncrier build --yes --version '${input:version}' && git add . && git commit -m '${input:version}'",
      "icon": { "id": "tag" }
    },
    {
      "label": "task: Release version",
      "command": "./Invoke-Uv.ps1 && ($version = (Get-Content '.copier-answers.yml' | Select-String -Pattern '^project_version:\\s(.+)$').Matches.Groups[1].value && git tag --sign -m $version $version && git push && gh release create --discussion-category='announcements' --notes='' --title=$version --verify-tag $version)",
      "icon": { "id": "tag" }
    },
    {
      "label": "task: Update changelog",
      "command": "./Invoke-Uv.ps1 python -m notes-dev add-change ${input:changeType}",
      "icon": { "id": "tag" }
    },
    {
      "label": "task: Update changelog with the latest commit's message",
      "command": "./Invoke-Uv.ps1 towncrier create +$((Get-Date).ToUniversalTime().ToString('o').Replace(':','-')).change.md --content $($(git log -1 --format='%s') + ' ([' + $(git rev-parse --short HEAD) + '](https://github.com/blakeNaccarato/notes/commit/' + $(git rev-parse HEAD) + '))\n')",
      "icon": { "id": "tag" }
    }
  ]
}
